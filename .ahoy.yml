---
ahoyapi: v2

commands:

  build:
    usage: Build or rebuild project.
    cmd: |
      ahoy title "Building project"
      ahoy pre-flight
      ahoy reset
      ahoy up
      ahoy install
      ahoy provision
      ahoy doctor
      ahoy info
      ahoy title "Build complete"

  cli:
    usage: Start a shell inside CLI container or run a command.
    cmd: echo "Would start a shell inside CLI container or run a command."

  doctor:
    usage: Find problems with current project setup.
    cmd: echo "Would find problems with current project setup."

  info:
    usage: Print information about this project.
    cmd: echo "Would print project information"

  install:
    usage: Install project and all dependencies
    cmd: echo "Would install project and all dependencies."

  provision:
    usage: Run site provision operations.
    cmd: echo "Would run provision operations."

  reset:
    usage: "Remove containers, all build files."
    cmd: |
      ahoy confirm "All containers and build files will be removed. Proceed?" &&
      echo "Would remove containers and all build files."

  down:
    usage: Stop Docker containers and remove container, images, volumes and networks.
    cmd: echo "Would stop Docker containers and remove container, images, volumes and networks."

  lint:
    usage: Lint code.
    cmd: echo "Would lint code"

  logs:
    usage: Show Docker logs.
    cmd: echo "Would show Docker logs."

  pull:
    usage: Pull latest docker images.
    cmd: echo "Would pull latest docker images."

  start:
    usage: Start existing Docker containers.
    cmd: echo "Would start existing Docker containers."

  stop:
    usage: Stop running Docker containers.
    cmd: echo "Would stop running Docker containers."

  test-unit:
    usage: Run unit tests.
    cmd: echo "Would run unit tests."

  test-bdd:
    usage: Run BDD tests.
    cmd: echo "Would run bdd tests."

  up:
    usage: Build and start Docker containers.
    cmd: echo "Would build and start Docker containers."

  # Utilities.
  title:
    cmd: printf "$(tput -Txterm setaf 4)[INFO] ${1}$(tput -Txterm sgr0)\n"
    hide: true

  pre-flight:
    cmd: echo "Would run pre-flight checks."
    hide: true

  local:
    usage: Custom local commands. See `ahoy local help`.
    cmd: |
      if [ -f .ahoy.local.yml ]; then
        ahoy -f ".ahoy.local.yml" "$@"
      else
        echo ".ahoy.local.yml does not exist."
        echo "Copy .ahoy.local.example.yml to .ahoy.local.yml and rerun this command.";
      fi

  # ----------------------------------------------------------------------------
  # Utilities.
  # ----------------------------------------------------------------------------
  confirm:
    cmd: |
      if [ -z "$AHOY_CONFIRM_RESPONSE" ]; then
        read -r -p ">> $1 [y/N] " AHOY_CONFIRM_RESPONSE
        [ "$AHOY_CONFIRM_RESPONSE" = "y" ] || [ "$AHOY_CONFIRM_RESPONSE" = true ] || ( echo "The operation was canceled." && exit 1 )
      else
        echo ">> $1 [y/N] $AHOY_CONFIRM_RESPONSE" \
        && if [ "${AHOY_CONFIRM_WAIT_SKIP}" != "1" ]; then echo "Waiting for 3 seconds... Press Ctrl+C to cancel."; sleep 3; fi
      fi
    hide: true

# Override entrypoint to alter default behaviour of Ahoy.
entrypoint:
  # Run all commands in Bash.
  - bash
  # Read the commands from the string.
  - -c
  # Exit the script if any statement returns a non-true return value.
  - -e
  # Read variables from .env file, respecting existing environment variable values.
  - |
    [ -f .env ] && [ -s .env ] && t=$(mktemp) && export -p > "$t" && set -a && . ./.env && if [ -f ./.env.local ];then . ./.env.local;fi && set +a && . "$t" && rm "$t" && unset t
    bash -e -c "$0" "$@"
  - '{{cmd}}'
  - '{{name}}'
